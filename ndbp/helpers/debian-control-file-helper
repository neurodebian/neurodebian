#!/bin/sh

#
# The helper script to parse Debian control files
#
# Copyright: 2024, The NeuroDebian Team <team@neuro.debian.net>
#            2024, Vasyl Gello <vasek.gello@gmail.com>
#

# Required tools: sh, echo

REQUIRED_TOOLS="echo"

for _TEMP in ${REQUIRED_TOOLS}; do
	if ! command -v "${_TEMP}" 1>/dev/null 2>&1; then
		echo "ERROR: Required tool ${_TEMP} not found!" >&2
		return 1
	fi
done

unset _TEMP

# Start of functions

# Check if given architecture specification matches at least one binary package
# 'Architecture' field
#
# Args:
# ${1} - architecture string ('source', 'all', 'amd64' ...)
#
# Returns:
# 0 - if architecture matches at least one binary package
# 1 - if not
# 2 - if architecture input is empty
# 3 - if architecture input is wildcard ('*any*', '*-all' but not 'all')
# 4 - if debian/control is missing
#

control_assert_binpkg_architecture() (
	ARCH="${1}"

	# Check the architecture input is not empty

	if [ -z "${ARCH}" ]; then
		return 2
	fi

	# Do not allow wildcard architectures

	case "${ARCH}" in
	*any* | *-all)
		return 3
		;;
	esac

	# Check if 'debian/control' exists

	if [ ! -f debian/control ]; then
		return 4
	fi

	# Source packages are always present

	if [ "${ARCH}" = "source" ]; then
		return 0
	fi

	# Now iterate through all 'Architecture' fields

	while read -r _1; do
		case "${_1}" in
		Architecture:*)
			case "${ARCH}" in
			all)
				# If architecture requested is 'all', one can expand
				# to "all" or "linux-all"

				case "${_1}" in
				*linux-all*)
					return 0
					;;
				*all*)
					return 0
					;;
				esac
				;;
			*)
				# For arch-dependent inputs one can take its own
				# value or 'any' or 'linux-any' wildcard

				case "${_1}" in
				*linux-any*)
					return 0
					;;
				*any*)
					return 0
					;;
				*"${ARCH}"*)
					return 0
					;;
				esac
				;;
			esac

			;;
		*) ;;

		esac
	done 0<debian/control

	# Return not found

	return 1
)

# Check if package needs root privileges during build process
# (aka 'Rules-Requires-Root')
#
# Args:
#
# Returns:
# 0 - if root privileges are required
# 1 - if not
# 2 - if debian/control is missing

control_rules_requires_root() (
	# Check if 'debian/control' exists

	if [ ! -f debian/control ]; then
		return 2
	fi

	# Now iterate through fields 'Rules-Requires-Root'

	while read -r _1; do
		case "${_1}" in
		Rules-Requires-Root:*no)
			return 1
			;;
		*)
			return 0
			;;
		esac
	done 0<debian/control
)
