#!/bin/sh

#
# The build step script to build the package inside container
#
# Copyright: 2024, The NeuroDebian Team <team@neuro.debian.net>
#            2024, Vasyl Gello <vasek.gello@gmail.com>
#

# Required tools: sh, apt-get, chown, cp, echo, mv, rm, su

REQUIRED_TOOLS="apt-get dpkg chown cp echo mv rm su"

for _TEMP in ${REQUIRED_TOOLS}; do
	if ! command -v "${_TEMP}" 1>/dev/null 2>&1; then
		echo "ERROR: Required tool ${_TEMP} not found!" >&2
		return 1
	fi
done

unset _TEMP

# Start of script

# Parse command-line arguments

SRCPKGDIR="${1}"
ARCH="${2}"
CACHEDIR="${3}"
DSTDIR="${4}"
RULES_REQUIRES_ROOT="${5}"

if [ -z "${SRCPKGDIR}" ]; then
	echo "ERROR: Source package directory can not be empty!" >&2
	exit 1
fi

if [ ! -d "${SRCPKGDIR}" ]; then
	echo "ERROR: Source package directory does not exist!" >&2
	exit 1
fi

if [ -z "${ARCH}" ]; then
	echo "ERROR: Architecture can not be empty!" >&2
	exit 1
fi

if [ -z "${CACHEDIR}" ]; then
	echo "ERROR: Dependency cache directory can not be empty!" >&2
	exit 1
fi

if [ ! -d "${CACHEDIR}" ]; then
	echo "ERROR: Dependency cache directory can not be empty!" >&2
	exit 1
fi

if [ -z "${DSTDIR}" ]; then
	echo "ERROR: Build artifact directory can not be empty!" >&2
	exit 1
fi

if [ ! -d "${DSTDIR}" ]; then
	echo "ERROR: Build artifact directory can not be empty!" >&2
	exit 1
fi

# Copy the source package directory to /tmp/build

if ! cp -a "${SRCPKGDIR}" /tmp/build; then
	echo "ERROR: Can not copy '${SRCPKGDIR}' to '/tmp/build'!" >&2
	exit 1
fi

# if Rules-Requires-Root is set to 'no', chown /tmp/build to user:user

if [ "${RULES_REQUIRES_ROOT}" = "no" ]; then
	if ! chown -R user:user /tmp/build; then
		echo "ERROR: Can not chown '/tmp/build' to 'user:user'!" >&2
		exit 1
	fi
fi

# Move to source package directory

if ! cd /tmp/build; then
	echo "ERROR: Can not change directory to '/tmp/build'!" >&2
	exit 1
fi

for i in *; do
	if [ -d "${i}" ]; then
		if ! cd "${i}"; then
			echo "ERROR: Can not change directory to '${i}'!" >&2
			exit 1
		fi
	fi
done

# Add architecture to dpkg (except 'all')

if [ "${ARCH}" != "all" ]; then
	if ! dpkg --add-architecture "${ARCH}"; then
		echo "ERROR: Can not add '${ARCH}' to dpkg!" >&2
		exit 1
	fi
fi

# Remove all /etc/apt/sources.list.d/*.list

if ! rm /etc/apt/sources.list.d/*.list; then
	echo "ERROR: Can not remove apt sources!" >&2
	exit 1
fi

# Add the dependency cache as local trusted repository

if ! echo "deb [trusted=yes] file://${CACHEDIR} ./" \
	1>/etc/apt/sources.list.d/local.list; then
	echo "ERROR: Can not add local repository!" >&2
	exit 1
fi

# Update package indices

export DEBIAN_FRONTEND=noninteractive

exec apt-get update &

CMDPID="$!"

while true; do
	wait "${CMDPID}"
	RET=$?
	[ "${RET}" -lt 128 ] && break
done

if [ "${RET}" -ne 0 ]; then
	echo "ERROR: Can not 'apt-get update'!" >&2
	exit 1
fi

# Install all cached dependencies

exec apt-get install -yq "${CACHEDIR}"/*.deb &
CMDPID="$!"

while true; do
	wait "${CMDPID}"
	RET=$?
	[ "${RET}" -lt 128 ] && break
done

if [ "${RET}" -ne 0 ]; then
	echo "ERROR: Can not install dependencies!" >&2
	exit 1
fi

# Assemble arguments to 'dpkg-buildpackage'

NATIVE_ARCH="$(dpkg --print-architecture)"

BUILDPACKAGE_MODE=''
DEB_BUILD_OPTIONS=''

case "${ARCH}" in
source)
	BUILDPACKAGE_MODE='-S'
	HOST_ARCH="${NATIVE_ARCH}"
	;;
all)
	BUILDPACKAGE_MODE='-A'
	HOST_ARCH="${NATIVE_ARCH}"
	;;
*)
	BUILDPACKAGE_MODE='-b'
	HOST_ARCH="${ARCH}"

	if [ "${ARCH}" != "${NATIVE_ARCH}" ]; then
		export DEB_BUILD_OPTIONS="nocheck"
	fi

	;;
esac

# Now start the build

if [ "${RULES_REQUIRES_ROOT}" = "no" ]; then
	exec su user \
		-s /usr/bin/dpkg-buildpackage \
		-- \
		"${BUILDPACKAGE_MODE}" \
		--host-arch "${HOST_ARCH}" &
else
	exec /usr/bin/dpkg-buildpackage \
		"${BUILDPACKAGE_MODE}" \
		--host-arch "${HOST_ARCH}" &
fi

CMDPID="$!"

while true; do
	wait "${CMDPID}"
	RET=$?
	[ "${RET}" -lt 128 ] && break
done

if [ "${RET}" -ne 0 ]; then
	echo "ERROR: Can not build package!" >&2
	exit 1
fi

# Copy build artifacts to artifact directory

case "${ARCH}" in
source)
	cp ../*.buildinfo ../*.changes ../*.tar* ../*.dsc \
		"${DSTDIR}"
	;;
*)
	cp ../*.buildinfo ../*.changes ../*.deb \
		"${DSTDIR}"
	;;
esac

if [ "$?" -ne 0 ]; then
	echo "ERROR: Can not copy artifacts!" >&2
	exit 1
fi

# Chown artifacts to root:root

if ! chown root:root "${DSTDIR}/"* ; then
	echo "ERROR: Can not chown artifacts back!" >&2
	exit 1
fi

exit 0
